@{
    ViewBag.Title = "Index";
    Layout = "~/Shared/_Layout1.cshtml";
}

@*<style>
    .boundary{
        border: 1px dotted black;
    }
</style>*@

<script>

            /*
            str: 0,
            dex: 0,
            con: 0,
            int: 0,
            wis: 0,
            cha: 0,
            strMod: 0,
            dexMod: 0,
            conMod: 0,
            intMod: 0,
            wisMod: 0,
            chaMod: 0,
            savingThrows:[
                { type: "str", has: true, val: 0 },
                { type: "dex", has: false, val: 0 },
                { type: "con", has: true, val: 0 },
                { type: "int", has: false, val: 0 },
                { type: "wis", has: false, val: 0 },
                { type: "cha", has: false, val: 0 },
            ],
            skills: [
                { type: "Acrobatics(Dex)", has: false, val: 0 },
                { type: "Animal Handling(Wis)", has: false, val: 0 },
                { type: "Arcana(Int)", has: false, val: 0 },
                { type: "Athletics(Str)", has: true, val: 0 },
                { type: "Deception(Cha)", has: false, val: 0 },
                { type: "History(Int)", has: false, val: 0 },
                { type: "Insight(Wis)", has: false, val: 0 },
                { type: "Intimidation(Cha)", has: true, val: 0 },
                { type: "Investigation(Int)", has: false, val: 0 },
                { type: "Medicine(Wis)", has: false, val: 0 },
                { type: "Nature(Int)", has: false, val: 0 },
                { type: "Perception(Wis)", has: true, val: 0 },
                { type: "Performance(Cha)", has: false, val: 0 },
                { type: "Persuation(Cha)", has: false, val: 0 },
                { type: "Religion(Int)", has: false, val: 0 },
                { type: "Sleight of Hand(Dex)", has: false, val: 0 },
                { type: "Stealth(Dex)", has: false, val: 0 },
                { type: "Survival(Wis)", has: false, val: 0 },
            ],
            passiveWisdom: 0
            */
    $(document).ready(function () {
    /*
KNOCKOUT JS CODE
    */

    var expTable = [
        {level: 1, exp: 0, proficiencyBonus: 2},
        {level: 2, exp: 300 , proficiencyBonus: 2},
        {level: 3, exp: 900 , proficiencyBonus: 2},
        {level: 4, exp: 2700, proficiencyBonus: 2},
        {level: 5, exp: 6500, proficiencyBonus: 3},
        {level: 6, exp: 14000, proficiencyBonus: 3},
        {level: 7, exp: 23000, proficiencyBonus: 3},
        {level: 8, exp: 34000, proficiencyBonus: 3},
        {level: 9, exp: 48000, proficiencyBonus: 4},
        {level: 10, exp: 64000, proficiencyBonus: 4},
        {level: 11, exp: 85000, proficiencyBonus: 4},
        {level: 12, exp: 100000, proficiencyBonus: 4},
        {level: 13, exp: 120000, proficiencyBonus: 5},
        {level: 14, exp: 140000, proficiencyBonus: 5},
        {level: 15, exp: 165000, proficiencyBonus: 5},
        {level: 16, exp: 195000, proficiencyBonus: 5},
        {level: 17, exp: 225000, proficiencyBonus: 6},
        {level: 18, exp: 265000, proficiencyBonus: 6},
        {level: 19, exp: 305000, proficiencyBonus: 6},
        {level: 20, exp: 355000, proficiencyBonus: 6},
    ];

    var initialData = [
        {
            id: 0,
            pcName: "David E",
            curHp: 17,
            hp: 26,
            name: "Alton Brown",
            playerClass: "Barbarian",
            level: 1,
            background: "Soldier",
            race: "Stout Halfling",
            Alignment: "Lawful Good",
            exp: 1095,
            inspiration: 0,
            proficiencyBonus: 0,
        },
        {
            id: 1,
            pcName: "Nick C",
            hp: 28,
            curHp: 28,
            name: "Torrash Noraxius",
            playerClass: "Paladin",
            level: 1,
            background: "Noble",
            race: "Dragonborn",
            Alignment: "Lawful Good",
            exp: 995,
            inspiration: 0,
            proficiencyBonus: 0
        },
        {
            id: 3,
            pcName: "Rachel O",
            hp: 20,
            curHp: 20,
            name: "Gwynevyr Meliamne",
            playerClass: "Ranger",
            level: 1,
            background: "Outlander",
            race: "Wood Elf",
            Alignment: "Chaotic Good",
            exp: 995,
            inspiration: 0,
            proficiencyBonus: 0
        },
        {
            id: 4,
            pcName: "Cesar B",
            hp: 20,
            curHp: 20,
            name: "Grifith Hornraven (Whiteraven)",
            playerClass: "Bard",
            level: 1,
            background: "Charloten",
            race: "Human",
            Alignment: "Chaotic Neutral",
            exp: 995,
            inspiration: 0,
            proficiencyBonus: 0
        },
        {
            id: 5,
            pcName: "Alex L",
            hp: 10,
            curHp: 10,
            name: "Nala The Lightningator",
            playerClass: "Fighter",
            level: 1,
            background: "Outlander",
            race: "Dragonborn",
            Alignment: "Neutral",
            exp: 364,
            inspiration: 0,
            proficiencyBonus: 0
        },
        {
            id: 6,
            pcName: "DM",
            hp: 34,
            curHp: 34,
            name: "Cinder",
            playerClass: "Rogue",
            level: 5,
            background: "Spy",
            race: "Tiefling",
            Alignment: "Neutral",
            exp: 6500,
            inspiration: 0,
            proficiencyBonus: 0
        }

    ];

    function SetDefaultToastOptions() {
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": true,
            "progressBar": false,
            "positionClass": "toast-bottom-left",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };
    };

    var PCModel = function (pcs) {
        var self = this;

        self.pcsList = ko.observableArray(ko.utils.arrayMap(pcs, function (pc) {
            return {
                //id
                id: pc.id,
                //hp
                obCurHp: ko.observable(pc.curHp), obMaxHp: ko.observable(pc.hp), hpBoolPlus: ko.observable(false), hpModAmt: ko.observable(0),
                //exp
                level: ko.observable(pc.level), exp: ko.observable(pc.exp), expText: ko.observable(0), expModAmt: ko.observable(0),

                //general info
                pcName: pc.pcName, name: pc.name, playerClass: pc.playerClass, background: pc.background, race: pc.race, Alignment: pc.Alignment,
                inspiration: pc.inspiration, proficiencyBonus: pc.proficiencyBonus, notes: ""

            };
        }));

        //start of hp handling
        self.getHpPercentage = function (pc) {
            var hpRound = Math.round((pc.obCurHp() / pc.obMaxHp()) * 100);
            return hpRound;
        };

        self.hpClass = function (pc) {
            var hp = self.getHpPercentage(pc);
            if (hp >= 70) {
                return 'progress-bar-success';
            } else if (hp < 70 && hp >= 30) {
                return 'progress-bar-warning';
            } else if (hp < 30) {
                return 'progress-bar-danger';
            }
        };

        self.hpModeToggle = function (data, event) {
            if ($(event.currentTarget).val() == "+") {
                $(event.currentTarget).val("-");
                $(event.currentTarget).addClass("btn-danger");
                $(event.currentTarget).removeClass("btn-success");
                data.hpBoolPlus(false);
            }
            else {
                $(event.currentTarget).val("+");
                $(event.currentTarget).removeClass("btn-danger");
                $(event.currentTarget).addClass("btn-success");
                data.hpBoolPlus(true);
            }
        };

        self.hpModClick = function (data, event) {
            if (parseInt(data.hpModAmt())) {
                if (data.hpBoolPlus() == false)
                    var newHp = parseInt(data.obCurHp()) - parseInt(data.hpModAmt());
                else
                    var newHp = parseInt(data.obCurHp()) + parseInt(data.hpModAmt());

                if (newHp < 0)
                    newHp = 0;
                else if (newHp > data.obMaxHp())
                    newHp = data.obMaxHp();

                data.obCurHp(newHp);
            }
            else
            {
                SetDefaultToastOptions();
                Command: toastr["warning"]("HP Mod Input not valid: NaN.", "Warning!");
            }
        };
        //end of hp handling

        //start of exp handling
        self.getExpPercentage = function(pc){
            //get correct level by going through the table
            var exp = pc.exp();
            var x = 0;
            var found = false;
            for(i = 0; i < expTable.length; i++)
            {
                if(exp < expTable[i].exp)
                {
                    x = i;
                    found = true;
                    break;
                }
            }
            if(found){
            var level = expTable[x-1].level;
            pc.level(level);

            //get any remaining exp and make that the exp in the bar.
            var maxExp = expTable[x].exp;

            pc.expText((exp - expTable[x-1].exp) + '/' + (maxExp - expTable[x-1].exp));

            return Math.round(((exp - expTable[x-1].exp)/(maxExp - expTable[x-1].exp))*100);
            }
            else{
                pc.level(20);
                pc.expText("0/0");
                return 100;
            }
        };

        self.expModClick = function(data, event){
            var oldExp = data.exp();
            var newExp = data.exp();

            newExp += parseInt(eval(data.expModAmt()));
            if(newExp < 0)
                newExp = 0;

            if(newExp > oldExp){
                var expDiff = parseInt(newExp) - parseInt(oldExp);
                SetDefaultToastOptions();
                Command: toastr["success"](data.name + " - Gained: " + expDiff + "exp", "Exp Gained!");
            }
            data.exp(newExp);
        };

    };

    ko.applyBindings(new PCModel(initialData));
});
</script>

<head>
    <meta charset="utf-8" />
    <link rel="icon" href="data:;base64,iVBORw0KGgo=" />
    <link href="~/content/questr-styles.css" rel="stylesheet" />
</head>
<!--left paged div-->
<div class = "left-div">
    <div class="form-group">
        <label for="notes">Notes:</label>

        <textarea class="form-control" rows="12" id="notes" style="max-width: 100%;"></textarea>
    </div>

    <div class="dice-div form-group">
        <table style="float:left;">
            <thead>
                <tr>
                    <td>Amount</td>
                    <td></td>
                    <td>Num Faces</td>
                    <td>Modifier</td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <input id="inAmt" class="form-control" value="1" />
                    </td>
                    <td><h4>d</h4></td>
                    <td>
                        <input id="inNFace" class="form-control" value="6" />
                    </td>
                    <td>
                        <div class="input-group">
                            <span class="input-group-btn">
                                <input type="button" class="btn btn-success" id="btn-toggle-mod" value="+" />
                            </span>
                            <input id="inMod" type="text" class="form-control" value="0">
                        </div>
                    </td>
                </tr>
                <tr>
                    <!--roll button and result-->
                    <td colspan="4" style="text-align:center">
                        <div id="btn-roll" >
                            <div class="input-group">
                                <span class="input-group-btn">
                                    <input type="button" class="btn btn-default" id="btnRoll" value="Roll" />
                                </span>
                                <input id="inResult" type="text" class="form-control" readonly="readonly">
                            </div>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td colspan="4" style="text-align:center">
                        <div id ="div-btn-clear" >
                            <input type="button" class="btn btn-default" id="btnClear" value="Clear" />
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
        <div id="div-results" >
            <textarea class="form-control" id="taResults" readonly="readonly"></textarea>
        </div>
    </div> 

    <!--turn/time tracking-->
    <div class="form-group boundary">
        <!--time tracker-->
        <div id="div-time-tracker" >
            <div id="div-tod" class="input-group" >
                <input readonly="readonly" type="text" class="form-control" id="tod-val" value="12:00 AM">
                <input type="text" class="form-control" id="tod-mod" value="0">
                <span class="input-group-btn" style="float:left">
                    <input type="button" class="btn btn-default blackButton" id="btn-tod-len" value="H" />
                    <input type="button" class="btn btn-default" id="tod-go" value="Go" />
                </span>
            </div>
        </div>
        <!--turn tracker-->
        <div id="div-turn-tracker" >
            <div class="time-track-text">Turn:</div>
            <div id="turn-value-num" class="time-track-text" >0</div>
            <div id="div-turn-time" class="input-group" >
                <input  type="text" class="form-control" id="turn-value-time" readonly="readonly" value="00:00">
                <span id="turn-btns" class="input-group-btn" >
                    <input type="button" class="btn btn-default" id="btn-add-turn" value="+1" />
                    <input type="button" class="btn btn-default" id="btn-reset-turn" value="Reset" />
                </span>
            </div>
        </div>
    </div>
</div>

<!--right paged div-->
<div class="right-div" >
    <div class="container">
        <ul class="nav nav-tabs" id="sortable" data-bind="foreach: pcsList">

            <li data-bind="css: {active: $index() == 0 }">
                <a data-bind="attr: {href: '#tab' + id}, text: pcName" data-toggle="tab"></a>
            </li>
        </ul>
        <!--player container-->
        <div class="container-border-cup">
            <div class="tab-content " data-bind="foreach: pcsList">
                <div id="div-player-det" class="tab-pane tabbed-content-style" data-bind="attr: {id: 'tab' + id}, css: {active: $index() == 0 }">
                    <!--player details-->
                    <table id="player-table" >
                        <tr>
                            <td>
                                <h3 data-bind="text: name"></h3>
                            </td>
                            <td id="player-class" >
                                <h4 data-bind="text: background"></h4>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <h4 data-bind="text: race + ' ' + playerClass"></h4>
                            </td>
                            <td id="player-alignment" >
                                <h4 data-bind="text: Alignment"></h4>
                            </td>
                        </tr>
                    </table>

                    <!--player hp numbered-->
                    <div id="player-hp-num" >
                        <span data-bind="text: obCurHp"></span>/<span data-bind="text: obMaxHp"></span>
                    </div>
                    <!--player hp barred-->
                    <div id ="player-hp-bar" class="progress" >
                        <div class="progress-bar" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" data-bind="text: $root.getHpPercentage($data) + '%', attr:{class: 'progress-bar ' + $root.hpClass($data)}, style:{width: $root.getHpPercentage($data) + '%'}"></div>
                    </div>
                    <!--player hp modifier-->
                    <div class="input-group" style="padding-left:20px">
                        <span class="input-group-btn">
                            <input id="btn-hp-toggle" type="button" class="btn btn-danger" data-bind="click: $root.hpModeToggle" value="-" />
                        </span>
                        <input id="hp-mod-amt" style="width:70px" type="text" class="form-control" data-bind="attr: {id: 'inModHP' + $index}, value: hpModAmt">
                        <span id="btn-go-hp" class="input-group-btn" >
                            <input type="button" class="btn btn-default" data-bind="click: $root.hpModClick" value="Go" data-toggle="tooltip" title="Test" />
                        </span>
                    </div>

                    <table class="exp-info" >
                        <tr>
                            <td>
                                <span data-bind="text: 'Level: ' + level()"></span>
                            </td>
                            <td>
                                <span data-bind="text: ' : ' + exp()"></span>
                            </td>
                            <td>
                                <div class="progress progress-custom" data-toggle="tooltip" data-bind="attr: {title: $data.expText(), 'data-original-title': $data.expText()}">
                                    <div class="progress-bar progress-bar-custom " role="progressbar" data-bind="text: $root.getExpPercentage($data) + '%', style:{width: $root.getExpPercentage($data) + '%'}"></div>
                                </div>
                            </td>
                            <td>
                                <div id="div-exp" class="input-group" >
                                    <input id="exp-mod-amt" type="text" class="form-control" data-bind="value: expModAmt">
                                    <span class="input-group-btn">
                                        <input type="button" class="btn btn-default" value="Go" data-bind="click: $root.expModClick" />
                                    </span>
                                </div>
                            </td>
                        </tr>
                    </table>

                    <div id="div-good" >
                        <label>The Good:</label>
                        <textarea class="form-control" rows="12" style="max-width: 95%;"></textarea>
                    </div>
                    <div id="div-bad" >
                        <label>The Bad:</label>
                        <textarea class="form-control" rows="12" style="max-width: 100%;"></textarea>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <div class="container container-mm">
        <ul class="nav nav-tabs nav-tabs-mm">
            <!--<li class="active"><a href="#tab_01" data-toggle="tab">Tab 1</a><span style="line-height: 30px">✕</span></li>-->
            <li><button class="btn btn-primary" id="add-btn-mm" data-toggle="modal" data-target="#mmModal"><b>＋</b> Add</button></li>
        </ul>
        <div class="tab-content tab-content-mm">
            <!--<div class="tab-pane active" id="tab_01">Tab 1 Content</div>-->
        </div>
    </div>
    <div class="modal fade" id="mmModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <input type="text" id="newTabName" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="add-tab-mm" data-dismiss="modal">Add</button>
                </div>
            </div>
        </div>
    </div>
</div>