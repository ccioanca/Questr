@{
    ViewBag.Title = "Index";
    Layout = "~/Shared/_Layout1.cshtml";
}

@*<style>
    .boundary{
        border: 1px dotted black;
    }
</style>*@

<script>

            /*
            str: 0,
            dex: 0,
            con: 0,
            int: 0,
            wis: 0,
            cha: 0,
            strMod: 0,
            dexMod: 0,
            conMod: 0,
            intMod: 0,
            wisMod: 0,
            chaMod: 0,
            savingThrows:[
                { type: "str", has: true, val: 0 },
                { type: "dex", has: false, val: 0 },
                { type: "con", has: true, val: 0 },
                { type: "int", has: false, val: 0 },
                { type: "wis", has: false, val: 0 },
                { type: "cha", has: false, val: 0 },
            ],
            skills: [
                { type: "Acrobatics(Dex)", has: false, val: 0 },
                { type: "Animal Handling(Wis)", has: false, val: 0 },
                { type: "Arcana(Int)", has: false, val: 0 },
                { type: "Athletics(Str)", has: true, val: 0 },
                { type: "Deception(Cha)", has: false, val: 0 },
                { type: "History(Int)", has: false, val: 0 },
                { type: "Insight(Wis)", has: false, val: 0 },
                { type: "Intimidation(Cha)", has: true, val: 0 },
                { type: "Investigation(Int)", has: false, val: 0 },
                { type: "Medicine(Wis)", has: false, val: 0 },
                { type: "Nature(Int)", has: false, val: 0 },
                { type: "Perception(Wis)", has: true, val: 0 },
                { type: "Performance(Cha)", has: false, val: 0 },
                { type: "Persuation(Cha)", has: false, val: 0 },
                { type: "Religion(Int)", has: false, val: 0 },
                { type: "Sleight of Hand(Dex)", has: false, val: 0 },
                { type: "Stealth(Dex)", has: false, val: 0 },
                { type: "Survival(Wis)", has: false, val: 0 },
            ],
            passiveWisdom: 0
            */
    $(document).ready(function () {
    /*
KNOCKOUT JS CODE
    */

    var expTable = [
        {level: 1, exp: 0, proficiencyBonus: 2},
        {level: 2, exp: 300 , proficiencyBonus: 2},
        {level: 3, exp: 900 , proficiencyBonus: 2},
        {level: 4, exp: 2700, proficiencyBonus: 2},
        {level: 5, exp: 6500, proficiencyBonus: 3},
        {level: 6, exp: 14000, proficiencyBonus: 3},
        {level: 7, exp: 23000, proficiencyBonus: 3},
        {level: 8, exp: 34000, proficiencyBonus: 3},
        {level: 9, exp: 48000, proficiencyBonus: 4},
        {level: 10, exp: 64000, proficiencyBonus: 4},
        {level: 11, exp: 85000, proficiencyBonus: 4},
        {level: 12, exp: 100000, proficiencyBonus: 4},
        {level: 13, exp: 120000, proficiencyBonus: 5},
        {level: 14, exp: 140000, proficiencyBonus: 5},
        {level: 15, exp: 165000, proficiencyBonus: 5},
        {level: 16, exp: 195000, proficiencyBonus: 5},
        {level: 17, exp: 225000, proficiencyBonus: 6},
        {level: 18, exp: 265000, proficiencyBonus: 6},
        {level: 19, exp: 305000, proficiencyBonus: 6},
        {level: 20, exp: 355000, proficiencyBonus: 6},
    ];

    var initialData = [
        {
            id: 0,
            pcName: "David E",
            curHp: 17,
            hp: 26,
            name: "Alton Brown",
            playerClass: "Barbarian",
            level: 1,
            background: "Soldier",
            race: "Stout Halfling",
            Alignment: "Lawful Good",
            exp: 1095,
            inspiration: 0,
            proficiencyBonus: 0,
        },
        {
            id: 1,
            pcName: "Nick C",
            hp: 28,
            curHp: 28,
            name: "Torrash Noraxius",
            playerClass: "Paladin",
            level: 1,
            background: "Noble",
            race: "Dragonborn",
            Alignment: "Lawful Good",
            exp: 995,
            inspiration: 0,
            proficiencyBonus: 0
        },
        {
            id: 3,
            pcName: "Rachel O",
            hp: 20,
            curHp: 20,
            name: "Gwynevyr Meliamne",
            playerClass: "Ranger",
            level: 1,
            background: "Outlander",
            race: "Wood Elf",
            Alignment: "Chaotic Good",
            exp: 995,
            inspiration: 0,
            proficiencyBonus: 0
        },
        {
            id: 4,
            pcName: "Cesar B",
            hp: 20,
            curHp: 20,
            name: "Grifith Hornraven (Whiteraven)",
            playerClass: "Bard",
            level: 1,
            background: "Charloten",
            race: "Human",
            Alignment: "Chaotic Neutral",
            exp: 995,
            inspiration: 0,
            proficiencyBonus: 0
        },
        {
            id: 5,
            pcName: "Alex L",
            hp: 10,
            curHp: 10,
            name: "Nala The Lightningator",
            playerClass: "Fighter",
            level: 1,
            background: "Outlander",
            race: "Dragonborn",
            Alignment: "Neutral",
            exp: 364,
            inspiration: 0,
            proficiencyBonus: 0
        },
        {
            id: 6,
            pcName: "DM",
            hp: 34,
            curHp: 34,
            name: "Cinder",
            playerClass: "Rogue",
            level: 5,
            background: "Spy",
            race: "Tiefling",
            Alignment: "Neutral",
            exp: 6500,
            inspiration: 0,
            proficiencyBonus: 0
        }

    ];

    function SetDefaultToastOptions() {
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": true,
            "progressBar": false,
            "positionClass": "toast-bottom-left",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };
    };

    var PCModel = function (pcs) {
        var self = this;

        self.pcsList = ko.observableArray(ko.utils.arrayMap(pcs, function (pc) {
            return {
                //id
                id: pc.id,
                //hp
                obCurHp: ko.observable(pc.curHp), obMaxHp: ko.observable(pc.hp), hpBoolPlus: ko.observable(false), hpModAmt: ko.observable(0),
                //exp
                level: ko.observable(pc.level), exp: ko.observable(pc.exp), expText: ko.observable(0), expModAmt: ko.observable(0),

                //general info
                pcName: pc.pcName, name: pc.name, playerClass: pc.playerClass, background: pc.background, race: pc.race, Alignment: pc.Alignment,
                inspiration: pc.inspiration, proficiencyBonus: pc.proficiencyBonus, notes: ""

            };
        }));

        //start of hp handling
        self.getHpPercentage = function (pc) {
            var hpRound = Math.round((pc.obCurHp() / pc.obMaxHp()) * 100);
            return hpRound;
        };

        self.hpClass = function (pc) {
            var hp = self.getHpPercentage(pc);
            if (hp >= 70) {
                return 'progress-bar-success';
            } else if (hp < 70 && hp >= 30) {
                return 'progress-bar-warning';
            } else if (hp < 30) {
                return 'progress-bar-danger';
            }
        };

        self.hpModeToggle = function (data, event) {
            if ($(event.currentTarget).val() == "+") {
                $(event.currentTarget).val("-");
                $(event.currentTarget).addClass("btn-danger");
                $(event.currentTarget).removeClass("btn-success");
                data.hpBoolPlus(false);
            }
            else {
                $(event.currentTarget).val("+");
                $(event.currentTarget).removeClass("btn-danger");
                $(event.currentTarget).addClass("btn-success");
                data.hpBoolPlus(true);
            }
        };

        self.hpModClick = function (data, event) {
            if (parseInt(data.hpModAmt())) {
                if (data.hpBoolPlus() == false)
                    var newHp = parseInt(data.obCurHp()) - parseInt(data.hpModAmt());
                else
                    var newHp = parseInt(data.obCurHp()) + parseInt(data.hpModAmt());

                if (newHp < 0)
                    newHp = 0;
                else if (newHp > data.obMaxHp())
                    newHp = data.obMaxHp();

                data.obCurHp(newHp);
            }
            else
            {
                SetDefaultToastOptions();
                Command: toastr["warning"]("HP Mod Input not valid: NaN.", "Warning!");
            }
        };
        //end of hp handling

        //start of exp handling
        self.getExpPercentage = function(pc){
            //get correct level by going through the table
            var exp = pc.exp();
            var x = 0;
            var found = false;
            for(i = 0; i < expTable.length; i++)
            {
                if(exp < expTable[i].exp)
                {
                    x = i;
                    found = true;
                    break;
                }
            }
            if(found){
            var level = expTable[x-1].level;
            pc.level(level);

            //get any remaining exp and make that the exp in the bar.
            var maxExp = expTable[x].exp;

            pc.expText((exp - expTable[x-1].exp) + '/' + (maxExp - expTable[x-1].exp));

            return Math.round(((exp - expTable[x-1].exp)/(maxExp - expTable[x-1].exp))*100);
            }
            else{
                pc.level(20);
                pc.expText("0/0");
                return 100;
            }
        };

        self.expModClick = function(data, event){
            var oldExp = data.exp();
            var newExp = data.exp();

            newExp += parseInt(eval(data.expModAmt()));
            if(newExp < 0)
                newExp = 0;

            if(newExp > oldExp){
                var expDiff = parseInt(newExp) - parseInt(oldExp);
                SetDefaultToastOptions();
                Command: toastr["success"](data.name + " - Gained: " + expDiff + "exp", "Exp Gained!");
            }
            data.exp(newExp);
        };

    };

    ko.applyBindings(new PCModel(initialData));
});
</script>

<!--MM SECTION-->
<script>
    $(document).ready(function () {
        function addTab() {
            var content = ''

            $.get('@Url.Action("NewMonster", "DM")', function (data) {
                content = data;
            
                var label = $("#newTabName").val();
                var id = $(".nav-tabs-mm").children().length;

                var nav = $(".nav-tabs-mm");
                var tabs = $(".tab-content-mm");

                if (id == 1) {
                    var new_tab = $('<div>').addClass('tab-pane in active').attr('id', 'tab_' + id).append(content);
                    $("#add-btn-mm").closest('li').before('<li class="active"><a href="#tab_' + id + '" class="mm-tab-label">' + label + '</a><span style="line-height: 28px">✕</span></li>');
                }
                else {
                    var new_tab = $('<div>').addClass('tab-pane in').attr('id', 'tab_' + id + '_mm').append(content);
                    $("#add-btn-mm").closest('li').before('<li><a href="#tab_' + id + '_mm">' + label + '</a><span style="line-height: 30px">✕</span></li>');
                }
                tabs.append(new_tab);
            });
        };

        $('#add-tab-mm').click(function () {
            addTab();
        });

    });
</script>
<!--EO MM-->
<head>
    <meta charset="utf-8" />
    <link rel="icon" href="data:;base64,iVBORw0KGgo=" />
    <link href="~/content/questr-styles.css" rel="stylesheet" />
</head>
<!--left paged div-->
<div class = "left-div">
    @Html.Partial("~/Views/DM/Sections/_DMNotes.cshtml")
    @Html.Partial("~/Views/DM/Sections/_DiceRoller.cshtml")
    @Html.Partial("~/Views/DM/Sections/_TurnTimeTracker.cshtml")
    @Html.Partial("~/Views/DM/Sections/_ExpressionEvaluator.cshtml")
</div>

<!--right paged div-->
<div class="right-div" >
    @Html.Partial("~/Views/DM/Sections/_PCManager.cshtml")
    @Html.Partial("~/Views/DM/Sections/_MonsterManager.cshtml")
</div>